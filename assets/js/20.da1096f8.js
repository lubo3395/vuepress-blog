(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{562:function(s,r,t){"use strict";t.r(r);var e=t(17),a=Object(e.a)({},(function(){var s=this,r=s.$createElement,t=s._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"url"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[s._v("#")]),s._v(" URL")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// const url = require("url");')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" url "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'node:url'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("h2",{attrs:{id:"url-strings-and-url-objects"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-strings-and-url-objects"}},[s._v("#")]),s._v(" URL strings and URL objects")]),s._v(" "),t("h2",{attrs:{id:"url-parse-urlstring-parsequerystring-slashesdenotehost"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#url-parse-urlstring-parsequerystring-slashesdenotehost"}},[s._v("#")]),s._v(" url.parse(urlString[, parseQueryString[, slashesDenoteHost]])")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("urlString")]),s._v(" (string) 要解析的 URL 字符串。")]),s._v(" "),t("p",[t("code",[s._v("parseQueryString")]),s._v(" (boolean) 如果true，该query属性将始终设置为querystring模块parse() 方法返回的对象。如果false，query则返回的 URL 对象的属性将是一个未解析、未解码的字符串。默认值： false .")]),s._v(" "),t("p",[t("code",[s._v("slashesDenoteHost")]),s._v(" (boolean) 如果true，则文字字符串之后//和下一个字符串之前的第一个标记/将被解释为host。例如，给定//foo/bar，结果将是 {host: 'foo', pathname: '/bar'}而不是{pathname: '//foo/bar'}。 默认值： false .")])])])}),[],!1,null,null,null);r.default=a.exports}}]);