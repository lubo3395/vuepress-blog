(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{568:function(a,s,t){"use strict";t.r(s);var e=t(17),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"arcade-physics-街机物理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arcade-physics-街机物理"}},[a._v("#")]),a._v(" Arcade Physics 街机物理")]),a._v(" "),t("p",[a._v("physics.arcade")]),a._v(" "),t("p",[a._v("街机物理学世界。包含街机物理学相关的碰撞、重叠和运动方法。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arcade")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("game"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[a._v("#")]),a._v(" 属性")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 初始化 Arcade Physics 引擎")]),a._v("\ngame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("physics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("startSystem")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Phaser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("Physics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[a._v("ARCADE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 禁用底部的物理碰撞")]),a._v("\ngame"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("physics"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("arcade"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("checkCollision"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("down "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[a._v("#")]),a._v(" 方法")]),a._v(" "),t("h4",{attrs:{id:"collide"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collide"}},[a._v("#")]),a._v(" collide()")]),a._v(" "),t("p",[t("strong",[a._v("collide(object1, object2, collideCallback, processCallback, callbackContext) → {boolean}")])]),a._v(" "),t("p",[a._v("检查两个游戏对象之间的碰撞。您可以执行 Sprite 与 Sprite、Sprite 与 Group、Group 与 Group、Sprite 与 Tilemap 层或 Group 与 Tilemap 层的碰撞。")]),a._v(" "),t("p",[a._v("第一个和第二个参数都可以是不同类型的对象数组。如果传递了两个数组，第一个参数的内容将根据第二个参数的所有内容进行测试。对象也会自动分离。如果您不需要分离，请改用 ArcadePhysics.overlap。")]),a._v(" "),t("p",[a._v("可以提供可选的 processCallback。如果给定，当发现两个精灵发生碰撞时将调用此函数。它在任何分离发生之前被调用，让您有机会执行额外的检查。如果函数返回 true，则进行碰撞和分离。如果返回 false，则跳过。")]),a._v(" "),t("p",[a._v("collideCallback 是一个可选函数，只有在两个精灵发生碰撞时才会调用。如果已设置 processCallback，则需要返回 true 才能调用 collideCallback。注意：此函数不是递归的，并且不会针对传递的对象的子对象（即其他组中的组或 Tilemap）进行测试。")]),a._v(" "),t("h4",{attrs:{id:"overlap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#overlap"}},[a._v("#")]),a._v(" overlap()")]),a._v(" "),t("p",[a._v("检查两个游戏对象之间的重叠。对象可以是精灵、组或发射器。 您可以执行 Sprite vs. Sprite、Sprite vs. Group 和 Group vs. Group 重叠检查。")]),a._v(" "),t("p",[a._v("与碰撞不同，对象不会自动分离或应用任何物理，它们只是测试重叠结果。 第一个和第二个参数都可以是不同类型的对象数组。")]),a._v(" "),t("p",[a._v("如果传递了两个数组，第一个参数的内容将根据第二个参数的所有内容进行测试。")]),a._v(" "),t("p",[a._v("注意：此函数不是递归的，并且不会针对传递的对象的子对象（即组中的组）进行测试。")]),a._v(" "),t("p",[t("strong",[a._v("overlap(object1, object2, overlapCallback, processCallback, callbackContext) → {boolean}")])])])}),[],!1,null,null,null);s.default=r.exports}}]);