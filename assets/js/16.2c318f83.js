(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{557:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" http")]),t._v(" "),a("p",[t._v("要使用 HTTP 服务器与客户端，需要 "),a("code",[t._v("require('http')")]),t._v("。")]),t._v(" "),a("p",[t._v("Node.js 中的 HTTP 接口被设计成支持协议的许多特性。 比如，大块编码的消息。 这些接口不缓冲完整的请求或响应，用户能够以流的形式处理数据。")]),t._v(" "),a("p",[t._v("HTTP 消息头由一个对象表示，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n    'content-length': '123',\n    'content-type': 'text/plain',\n    'connection': 'keep-alive',\n    'host': 'mysite.com',\n    'accept': '*/*'\n}\n")])])]),a("p",[t._v("键名是小写的，键值不能修改。")]),t._v(" "),a("p",[t._v("为了支持各种可能的 HTTP 应用，Node.js 的 HTTP API 是非常底层的。 它只涉及流处理与消息解析。 它把一个消息解析成消息头和消息主体，但不解析具体的消息头或消息主体。")]),t._v(" "),a("p",[t._v("查看 message.headers 了解如何处理重复的消息头。")]),t._v(" "),a("p",[t._v("接收到的原始消息头保存在 rawHeaders 属性中，它是一个 [key, value, key2, value2, ...] 数组。 例如，上面的消息头对象有一个类似以下的 rawHeaders 列表：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[\n    'ConTent-Length', '123456',\n    'content-LENGTH', '123',\n    'content-type', 'text/plain',\n    'CONNECTION', 'keep-alive',\n    'Host', 'mysite.com',\n    'accepT', '*/*'\n]\n")])])]),a("h2",{attrs:{id:"http-agent-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-agent-类"}},[t._v("#")]),t._v(" http.Agent 类")]),t._v(" "),a("h2",{attrs:{id:"http-clientrequest-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-clientrequest-类"}},[t._v("#")]),t._v(" http.ClientRequest 类")]),t._v(" "),a("h2",{attrs:{id:"http-server-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-server-类"}},[t._v("#")]),t._v(" http.Server 类")]),t._v(" "),a("h2",{attrs:{id:"http-serverresponse-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-serverresponse-类"}},[t._v("#")]),t._v(" http.ServerResponse 类")]),t._v(" "),a("h3",{attrs:{id:"response-setheader-name-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-setheader-name-value"}},[t._v("#")]),t._v(" response.setHeader(name, value)")]),t._v(" "),a("p",[t._v("为一个隐式的响应头设置值。 如果该响应头已存在，则值会被覆盖。 如果要发送多个名称相同的响应头，则使用字符串数组。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("或")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Set-Cookie'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'type=ninja'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'language=javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果响应头字段的名称或值包含无效字符，则抛出 "),a("code",[t._v("TypeError")]),t._v(" 错误。")]),t._v(" "),a("p",[a("code",[t._v("response.setHeader()")]),t._v(" 设置的响应头会与 "),a("code",[t._v("response.writeHead()")]),t._v(" 设置的响应头合并，且 "),a("code",[t._v("response.writeHead()")]),t._v(" 的优先。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 content-type = text/plain")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ok'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"response-end-data-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-end-data-encoding-callback"}},[t._v("#")]),t._v(" response.end([data][, encoding][, callback])")]),t._v(" "),a("p",[t._v("该方法会通知服务器，所有响应头和响应主体都已被发送，即服务器将其视为已完成。")]),t._v(" "),a("p",[a("strong",[t._v("每次响应都必须调用 "),a("code",[t._v("response.end()")]),t._v(" 方法")]),t._v("。")]),t._v(" "),a("p",[t._v("如果指定了 "),a("code",[t._v("data")]),t._v("，则相当于调用 "),a("code",[t._v("response.write(data, encoding)")]),t._v(" 之后再调用 "),a("code",[t._v("response.end(callback)")]),t._v("。")]),t._v(" "),a("p",[t._v("如果指定了 "),a("code",[t._v("callback")]),t._v("，则当响应流结束时被调用。")]),t._v(" "),a("h3",{attrs:{id:"response-write-chunk-encoding-callback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-write-chunk-encoding-callback"}},[t._v("#")]),t._v(" response.write(chunk[, encoding][, callback])")]),t._v(" "),a("p",[t._v("如果该方法被调用且 "),a("code",[t._v("response.writeHead()")]),t._v(" 没有被调用，则它会切换到隐式响应头模式并刷新隐式响应头。")]),t._v(" "),a("p",[t._v("该方法会发送一块响应主体。 它可被多次调用，以便提供连续的响应主体片段。")]),t._v(" "),a("p",[t._v("请注意在"),a("code",[t._v("http")]),t._v("模块中，当请求是HEAD请求时，响应主体被省略。 类似地，"),a("code",[t._v("204")]),t._v("和"),a("code",[t._v("304")]),t._v("响应 "),a("em",[t._v("不能")]),t._v(" 包括消息体。")]),t._v(" "),a("p",[a("code",[t._v("chunk")]),t._v(" 可以是一个字符串或一个 buffer。 如果 "),a("code",[t._v("chunk")]),t._v(" 是一个字符串，则第二个参数指定如何将它编码成一个字节流。 "),a("code",[t._v("encoding")]),t._v(" 默认为 "),a("code",[t._v("'utf8'")]),t._v("。 当数据块被刷新时，"),a("code",[t._v("callback")]),t._v(" 会被调用。")]),t._v(" "),a("p",[t._v("注意：这是原始的 HTTP 主体，且与可能被使用的高级主体编码无关。")]),t._v(" "),a("p",[a("code",[t._v("response.write()")]),t._v(" 首次被调用时，会发送缓冲的响应头信息和响应主体的第一块数据到客户端。 "),a("code",[t._v("response.write()")]),t._v(" 第二次被调用时，Node.js 能够确定数据会被接收，于是开始传输新数据。 也就是说，响应的完成取决于响应主体的第一块数据。")]),t._v(" "),a("p",[t._v("如果全部数据被成功刷新到内核缓冲区，则返回 "),a("code",[t._v("true")]),t._v("。 如果全部或部分数据还在内存中排队，则返回 "),a("code",[t._v("false")]),t._v("。 当缓冲区再次空闲时，则触发 "),a("code",[t._v("'drain'")]),t._v(" 事件。")]),t._v(" "),a("h3",{attrs:{id:"response-writehead-statuscode-statusmessage-headers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#response-writehead-statuscode-statusmessage-headers"}},[t._v("#")]),t._v(" response.writeHead(statusCode[, statusMessage][, headers])")]),t._v(" "),a("p",[t._v("发送一个响应头给请求。 状态码是一个三位数的 HTTP 状态码，如 "),a("code",[t._v("404")]),t._v("。 最后一个参数 "),a("code",[t._v("headers")]),t._v(" 是响应头。 第二个参数 "),a("code",[t._v("statusMessage")]),t._v(" 是可选的状态描述。")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("byteLength")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("该方法在消息中只能被调用一次，且必须在 "),a("code",[t._v("response.end()")]),t._v(" 被调用之前调用。")]),t._v(" "),a("p",[t._v("如果在调用该方法之前调用 "),a("code",[t._v("response.write()")]),t._v(" 或 "),a("code",[t._v("response.end()")]),t._v("，则隐式的响应头会被处理并调用该函数。")]),t._v(" "),a("p",[a("code",[t._v("response.setHeader()")]),t._v(" 设置的响应头会与 "),a("code",[t._v("response.writeHead()")]),t._v(" 设置的响应头合并，且 "),a("code",[t._v("response.writeHead()")]),t._v(" 的优先。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 content-type = text/plain")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ok'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("注意，"),a("code",[t._v("Content-Length")]),t._v(" 是以字节（而不是字符）为单位的。 上面的例子行得通是因为字符串 "),a("code",[t._v("'hello world'")]),t._v(" 只包含单字节字符。 如果响应主体包含高级编码的字符，则应使用 "),a("code",[t._v("Buffer.byteLength()")]),t._v(" 来确定在给定编码中的字节数。 Node.js 不会检查 "),a("code",[t._v("Content-Length")]),t._v(" 与已发送的响应主体的长度是否相同。")]),t._v(" "),a("p",[t._v("如果响应头字段的名称或值包含无效字符，则抛出 "),a("code",[t._v("TypeError")]),t._v(" 错误。")])])}),[],!1,null,null,null);s.default=n.exports}}]);