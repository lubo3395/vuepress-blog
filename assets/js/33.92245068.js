(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{575:function(t,a,s){"use strict";s.r(a);var e=s(17),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"sprite"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sprite"}},[t._v("#")]),t._v(" Sprite")]),t._v(" "),s("p",[t._v("http://phaser.io/docs/2.6.2/Phaser.Sprite.html")]),t._v(" "),s("p",[t._v("一个有纹理的游戏对象，能够运行动画、输入事件和物理学。")]),t._v(" "),s("p",[t._v("精灵是游戏的命脉，几乎用于所有视觉效果。 最基本的 Sprite 由一组坐标和渲染到画布的纹理组成。 它们还包含允许物理运动（通过 Sprite.body）、输入处理（通过 Sprite.input）、 事件（通过 Sprite.events）、动画（通过 Sprite.animations）、相机剔除等。")]),t._v(" "),s("p",[t._v("构造函数")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sprite")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("game"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" frame"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("参数")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("game 【Phaser.Game】")]),t._v(" "),s("ul",[s("li",[t._v("对当前正在运行的游戏的引用。")])])]),t._v(" "),s("li",[s("p",[t._v("x 【number】")]),t._v(" "),s("ul",[s("li",[t._v("放置 Sprite 的 x 坐标（在世界空间中）")])])]),t._v(" "),s("li",[s("p",[t._v("y 【number】")]),t._v(" "),s("ul",[s("li",[t._v("放置 Sprite 的 y 坐标（在世界空间中）")])])]),t._v(" "),s("li",[s("p",[t._v("key 【string | Phaser.RenderTexture | Phaser.BitmapData | PIXI.Texture】")]),t._v(" "),s("ul",[s("li",[t._v("这是 Sprite 在渲染过程中使用的图像或纹理。它可以是一个字符串，它是对缓存条目的引用，或者是 RenderTexture 或 PIXI.Texture 的实例。")])])]),t._v(" "),s("li",[s("p",[t._v("frame 【string | number】")]),t._v(" "),s("ul",[s("li",[t._v("如果此 Sprite 使用的是 Sprite 表或纹理图集的一部分，您可以通过提供字符串或数字索引来指定要使用的确切帧。")])])])])]),t._v(" "),s("h3",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),s("h4",{attrs:{id:"alive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alive"}},[t._v("#")]),t._v(" alive")]),t._v(" "),s("p",[t._v("一个有用的标志，用来控制游戏对象是活着还是死了。")]),t._v(" "),s("p",[t._v("如果对象的生命值耗尽，健康组件的伤害方法会自动设置这个标志。或者你可以通过你的游戏代码来切换它。")]),t._v(" "),s("p",[t._v("这个属性主要是提供给你的游戏使用的--它并不影响渲染或逻辑更新。然而，你可以使用 Group.getFirstAlive 与这个属性结合起来，以实现快速的对象池和回收。")]),t._v(" "),s("h4",{attrs:{id:"anchor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#anchor"}},[t._v("#")]),t._v(" anchor")]),t._v(" "),s("p",[t._v("锚点设置纹理的原点。是一个 Point 对象 。")]),t._v(" "),s("p",[t._v("默认值为 （0, 0），这意味着纹理的原点位于左上角。将锚点设置为 （0.5, 0.5） 表示纹理原点居中，将锚点设置为 （1, 1） 将意味着纹理原点将位于右下角")]),t._v(" "),s("h4",{attrs:{id:"body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#body"}},[t._v("#")]),t._v(" body")]),t._v(" "),s("p",[t._v("body 是游戏对象的物理体。一旦一个游戏对象被启用为物理学，你就可以通过它访问所有相关的属性和方法。")]),t._v(" "),s("p",[t._v("默认情况下，游戏对象不会将自己添加到任何物理系统中，其主体属性将为空。")]),t._v(" "),s("p",[t._v("要为物理学启用这个游戏对象，你需要调用 game.physics.enable(object, system) 其中 object 是这个对象\n和系统是你正在使用的物理系统。如果没有给出，它默认为 Phaser.Physics.Arcade。")]),t._v(" "),s("p",[t._v("你也可以调用 "),s("strong",[t._v("game.physics.arcade.enable(object)")]),t._v("，或者将这个游戏对象添加到一个启用物理的组中。")]),t._v(" "),s("p",[t._v("重要提示：为 P2 或 Ninja 物理学启用一个游戏对象会自动将其锚点属性设置为 0.5。\n所以物理体在游戏对象上是居中的。")]),t._v(" "),s("p",[t._v("如果你需要一个不同的结果，那就手动调整或重新创建主体形状的偏移，或者在启用物理学后重置锚点。")]),t._v(" "),s("p",[s("strong",[t._v("sprite.body 的属性")])]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("p",[s("strong",[t._v("acceleration")])]),t._v(" "),s("p",[t._v("加速度是速度的变化率。以每秒平方的像素来衡量。")])])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("allowGravity")])]),t._v(" "),s("p",[t._v("允许本体受到重力的影响？无论是世界还是本地。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("allowRotation")])]),t._v(" "),s("p",[t._v("允许这个身体被旋转吗？(通过角度速度等)")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("angle")])]),t._v(" "),s("p",[t._v("[readonly] angle : number")]),t._v(" "),s("p",[t._v("体的速度角度，单位为弧度。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("bounce")])])]),t._v(" "),s("p",[t._v("碰撞反弹。bounce.x/y=1 意味着完全反弹，bounce.x/y=0.5 意味着 50%的反弹速度。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("checkCollision")])]),t._v(" "),s("p",[t._v("设置 checkCollision 属性来控制这个车身的碰撞处理方向。\n例如，checkCollision.up = false 意味着当碰撞发生在向上移动时，它不会发生碰撞。\n如果你需要完全禁用一个 Body，使用 body.enable = false，这也会禁用运动。\n如果你需要只禁用碰撞和/或重叠检查，但保留运动，请设置 checkCollision.none = true。一个包含允许碰撞的对象。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("collideWorldBounds")])])]),t._v(" "),s("p",[t._v('身体可以被设置为自动碰撞世界边界，如果设置为 "true"，则反弹回世界。否则它将离开世界。身体应该与世界边界相撞吗？')])]),t._v(" "),s("li",[s("p",[s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("drag")])])]),t._v(" "),s("p",[t._v("摩擦力。")])]),t._v(" "),s("li",[s("p",[s("strong",[s("span",{staticStyle:{color:"red"}},[t._v("touching")])])]),t._v(" "),s("p",[t._v("当实体与另一个碰撞时，此对象将填充布尔值。")]),t._v(" "),s("p",[t._v("touch.up=true 表示碰撞发生在该主体的顶部。包含触摸结果的对象。")])]),t._v(" "),s("li",[s("p",[t._v("velocity")]),t._v(" "),s("p",[t._v("速度，或身体的速度变化率。以每秒的像素为单位测量。"),s("a",{attrs:{href:"http://phaser.io/docs/2.6.2/Phaser.Point.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Phaser.Point"),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在屏幕上移动球")]),t._v("\nball"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("velocity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 球将通过向上移动而不是下降来开始游戏")]),t._v("\nball"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("velocity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li")])]),t._v(" "),s("h4",{attrs:{id:"animations"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#animations"}},[t._v("#")]),t._v(" animations")]),t._v(" "),s("p",[t._v("如果游戏对象被启用为动画（比如 Phaser.Sprite），这就是对其 AnimationManager 实例的引用。")]),t._v(" "),s("p",[t._v("通过它，你可以创建、播放、暂停和停止动画。")]),t._v(" "),s("p",[s("strong",[t._v("sprite.body 的方法")])]),t._v(" "),s("blockquote"),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),s("h3",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")])])}),[],!1,null,null,null);a.default=n.exports}}]);